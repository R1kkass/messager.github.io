{"version":3,"file":"static/js/931.915b9720.chunk.js","mappings":"oLAWO,SAASA,EAAMC,EAAcC,GAUhC,OARiBC,EAAAA,EAAAA,KAAW,GAAD,OAAIC,EAAAA,GAAG,eAAe,CAC7CF,SAAUA,EACVD,MAAOA,IAEVI,MAAK,SAACC,GAEHC,aAAaC,QAAQ,QAASF,EAAIG,KAAKC,MAC3C,GAEJ,CAEO,SAASC,EAAaV,EAAcC,EAAiBU,EAAmBC,GAS3E,OAPiBV,EAAAA,EAAAA,KAAW,GAAD,OAAIC,EAAAA,GAAG,sBAAsB,CACpDF,SAAUA,EACVW,SAAUA,EACVD,UAAWA,EACXX,MAAOA,GAKf,C,+ICwFA,UA1GwB,WACpBa,SAASC,MAAQ,qEACjB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEjB,GAAGZ,aAAaa,QAAQ,SACpB,OACI,gBAAKC,UAAU,QAAO,UAClB,0BAEI,sHAMhB,IAAMC,EAAG,yCAAE,WAAOrB,EAAcC,EAAiBU,EAAmBC,GAAgB,uEAChFF,EAAAA,EAAAA,GAAaV,EAAOC,EAAUU,EAAWC,GACxCR,MAAK,WACFW,EAAS,UACTE,GAASK,EAAAA,EAAAA,KACb,IAAE,2CAEL,gBAPQ,4CAST,OACI,gBAAKF,UAAU,QAAO,UAClB,4BACI,gGACJ,SAAC,KAAM,CACPG,cAAe,CAAEvB,MAAO,GAAIC,SAAU,GAAIW,SAAU,GAAID,UAAW,IACnEa,SAAU,SAAAC,GACN,IAAMC,EAAa,CAAC,EAQpB,OAPKD,EAAOzB,MAGX,2CAA2C2B,KAAKF,EAAOzB,SAExD0B,EAAO1B,MAAQ,iHAJf0B,EAAO1B,MAAQ,WAMR0B,CACX,EACAE,SAAU,SAACH,EAAO,GAAgB,EAAbI,cACjBR,EAAII,EAAOzB,MAAOyB,EAAOxB,SAAUwB,EAAOd,UAAWc,EAAOb,SAChE,EAAE,SAED,gBACGa,EAAM,EAANA,OACAC,EAAM,EAANA,OACAI,EAAO,EAAPA,QACAC,EAAY,EAAZA,aACAC,EAAU,EAAVA,WACAC,EAAY,EAAZA,aACAC,EAAY,EAAZA,aAAY,OAEZ,kBAAMN,SAAUK,EAAa,WAC7B,kBACIE,KAAK,YACLC,KAAK,YACLC,SAAUN,EACVO,OAAQN,EACRO,MAAOd,EAAOd,UACd6B,YAAY,uBAEfd,EAAO1B,OAAS8B,EAAQ9B,OAAS0B,EAAO1B,OACzC,mBACA,kBACImC,KAAK,WACLC,KAAK,WACLC,SAAUN,EACVO,OAAQN,EACRO,MAAOd,EAAOb,SACd4B,YAAY,+CAEfd,EAAO1B,OAAS8B,EAAQ9B,OAAS0B,EAAO1B,OACzC,mBACA,kBACImC,KAAK,QACLC,KAAK,QACLC,SAAUN,EACVO,OAAQN,EACRO,MAAOd,EAAOzB,MACdwC,YAAY,mCAEfd,EAAO1B,OAAS8B,EAAQ9B,OAAS0B,EAAO1B,OACzC,mBACA,kBACImC,KAAK,WACLC,KAAK,WACLC,SAAUN,EACVO,OAAQN,EACRO,MAAOd,EAAOxB,SACduC,YAAY,yCAEfd,EAAOzB,UAAY6B,EAAQ7B,UAAYyB,EAAOzB,UAC3C,SAAC,IAAM,CAACkC,KAAK,SAASM,SAAUP,EAAa,wCAG1C,QAMvB,C","sources":["Page/Login/LoginService.ts","Page/Login/Registration.tsx"],"sourcesContent":["import axios from \"axios\"\r\nimport { redirect, useNavigate } from \"react-router-dom\";\r\nimport { URi } from \"../../Const/Const\";\r\n\r\ninterface IToken{\r\n    data:{\r\n        token:string\r\n    }\r\n    \r\n}\r\n\r\nexport function logIn(email:string, password:string){\r\n    \r\n    const response = axios.post(`${URi}/user/login`, {\r\n        password: password,\r\n        email: email\r\n    })\r\n    .then((res:IToken)=>{\r\n        \r\n        localStorage.setItem('token', res.data.token)\r\n    })\r\n    return response\r\n}\r\n\r\nexport function registration(email:string, password:string, firstName: string, lastName: string){\r\n    \r\n    const response = axios.post(`${URi}/user/registration`, {\r\n        password: password,\r\n        lastName: lastName,\r\n        firstName: firstName,\r\n        email: email\r\n    })\r\n\r\n    return response\r\n\r\n}","import React, { FC } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { registration } from \"./LoginService\";\r\nimport './Login.scss'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { tokenAction } from \"../../Redux/store/token\";\r\nimport { Formik } from \"formik\";\r\n\r\nexport interface ILoginRedux{\r\n    auth: {\r\n        auth: any,\r\n        firebase: any,\r\n        firestore: any\r\n    }\r\n}\r\n\r\nconst Registration:FC = () => {\r\n    document.title = \"Регистрация\"\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    \r\n    if(localStorage.getItem('token')){\r\n        return (\r\n            <div className=\"Login\">\r\n                <div>\r\n                    \r\n                    <h2>Вы авторизованы</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const reg =async (email:string, password:string, firstName: string, lastName: string)=>{\r\n        registration(email, password, firstName, lastName)\r\n        .then(()=>{\r\n            navigate('/login')\r\n            dispatch(tokenAction())\r\n        })\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"Login\">\r\n            <div>\r\n                <h2>Регистрация</h2>\r\n            <Formik\r\n            initialValues={{ email: '', password: '', lastName: '', firstName: '' }}\r\n            validate={values => {\r\n                const errors:any = {};\r\n                if (!values.email) {\r\n                errors.email = 'Required';\r\n                } else if (\r\n                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                ) {\r\n                errors.email = 'Неправильно введён Email';\r\n                }\r\n                return errors;\r\n            }}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                reg(values.email, values.password, values.firstName, values.lastName)\r\n            }}\r\n            >\r\n            {({\r\n                values,\r\n                errors,\r\n                touched,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit,\r\n                isSubmitting,\r\n            }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"firstName\"\r\n                    name=\"firstName\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.firstName}\r\n                    placeholder=\"Имя\"\r\n                />\r\n                {errors.email && touched.email && errors.email}\r\n                <br/>   \r\n                <input\r\n                    type=\"lastName\"\r\n                    name=\"lastName\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.lastName}\r\n                    placeholder=\"Фамилия\"\r\n                />\r\n                {errors.email && touched.email && errors.email}\r\n                <br/>    \r\n                <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.email}\r\n                    placeholder=\"Почта\"\r\n                />\r\n                {errors.email && touched.email && errors.email}\r\n                <br/>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.password}\r\n                    placeholder=\"Пароль\"\r\n                />\r\n                {errors.password && touched.password && errors.password}\r\n                    <Button type=\"submit\" disabled={isSubmitting}>\r\n                        Вход\r\n                    </Button>\r\n                </form>\r\n            )}\r\n            </Formik>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Registration"],"names":["logIn","email","password","axios","URi","then","res","localStorage","setItem","data","token","registration","firstName","lastName","document","title","navigate","useNavigate","dispatch","useDispatch","getItem","className","reg","tokenAction","initialValues","validate","values","errors","test","onSubmit","setSubmitting","touched","handleChange","handleBlur","handleSubmit","isSubmitting","type","name","onChange","onBlur","value","placeholder","disabled"],"sourceRoot":""}